train <- function(train_data, train_label, run.RF = F,run.TF = F,run.GBM = F, export = T){
### Input:
###  -  processed features from images
###  -  labels
### Output: training model specification
### load libraries
library("gbm")
RF <- function(train_data, train_label){
require(randomForest, quietly = TRUE)
seed = 1
set.seed(seed)
response <- train_label
predictors <- train_data
rf_model <- tuneRF(predictors, response, ntreeTry = 500, doBest = TRUE)
if(export){
save(rf_model, file = "../output/rf_model.Rdata")
}
return(rf_model)
}
TF <- function(train_data){
save(tf_model, file = "../output/tf_model.Rdata")
return(TF_model)
}
GBM <- function(train_data){
save(gbm_model, file = "../output/gbm_model.Rdata")
return(GBM_model)
}
### Train with selected model
if(run.RF){
RF_model <- RF(train_data)
return(RF_model)
}
if(run.tf){
TF_model <- TF(train_data)
return(TF_model)
}
if(run.GBM){
GBM_model <- GBM(train_data)
return(GBM_model)
}
}
load("../data/split_data/train/train_data.Rdata")
train_data <- train_data[,3:ncol(train_data)]
train_label <- train_data$label
RF_model <- train(train_data, train_label, run.RF = T)
train <- function(train_data, train_label, run.RF = F,run.TF = F,run.GBM = F, export = T){
### Input:
###  -  processed features from images
###  -  labels
### Output: training model specification
### load libraries
library("gbm")
RF <- function(train_data, train_label){
require(randomForest, quietly = TRUE)
seed = 1
set.seed(seed)
response <- train_label
predictors <- train_data
rf_model <- tuneRF(predictors, response, ntreeTry = 500, doBest = TRUE)
if(export){
save(rf_model, file = "../output/rf_model.Rdata")
}
return(rf_model)
}
TF <- function(train_data){
save(tf_model, file = "../output/tf_model.Rdata")
return(TF_model)
}
GBM <- function(train_data){
save(gbm_model, file = "../output/gbm_model.Rdata")
return(GBM_model)
}
### Train with selected model
if(run.RF){
RF_model <- RF(train_data)
return(RF_model)
}
if(run.tf){
TF_model <- TF(train_data)
return(TF_model)
}
if(run.GBM){
GBM_model <- GBM(train_data)
return(GBM_model)
}
}
load("../data/split_data/train/train_data.Rdata")
train_label <- train_data$label
train_data <- train_data[,3:ncol(train_data)]
RF_model <- train(train_data, train_label, run.RF = T)
train_label
View(train_data)
rf_model <- tuneRF(train_data, train_label, ntreeTry = 500, doBest = TRUE)
?tuneRF
RF_model <- train(train_data, train_label, run.RF = T)
train <- function(train_data, train_label, run.RF = F,run.TF = F,run.GBM = F, export = T){
### Input:
###  -  processed features from images
###  -  labels
### Output: training model specification
### load libraries
library("gbm")
RF <- function(train_data, train_label){
require(randomForest, quietly = TRUE)
seed = 1
set.seed(seed)
rf_model <- tuneRF(train_data, train_label, ntreeTry = 500, doBest = TRUE)
if(export){
save(rf_model, file = "../output/rf_model.Rdata")
}
return(rf_model)
}
TF <- function(train_data){
save(tf_model, file = "../output/tf_model.Rdata")
return(TF_model)
}
GBM <- function(train_data){
save(gbm_model, file = "../output/gbm_model.Rdata")
return(GBM_model)
}
### Train with selected model
if(run.RF){
RF_model <- RF(train_data)
return(RF_model)
}
if(run.tf){
TF_model <- TF(train_data)
return(TF_model)
}
if(run.GBM){
GBM_model <- GBM(train_data)
return(GBM_model)
}
}
load("../data/split_data/train/train_data.Rdata")
train_label <- train_data$label
train_data <- train_data[,3:ncol(train_data)]
RF_model <- train(train_data, train_label, run.RF = T)
train <- function(train_data, train_label, run.RF = F,run.TF = F,run.GBM = F, export = T){
### Input:
###  -  processed features from images
###  -  labels
### Output: training model specification
### load libraries
library("gbm")
RF <- function(train_data, train_label){
require(randomForest, quietly = TRUE)
seed = 1
set.seed(seed)
rf_model <- tuneRF(train_data, train_label, ntreeTry = 500, doBest = TRUE)
if(export){
save(rf_model, file = "../output/rf_model.Rdata")
}
return(rf_model)
}
TF <- function(train_data){
save(tf_model, file = "../output/tf_model.Rdata")
return(TF_model)
}
GBM <- function(train_data){
save(gbm_model, file = "../output/gbm_model.Rdata")
return(GBM_model)
}
### Train with selected model
if(run.RF){
RF_model <- RF(train_data, train_label)
return(RF_model)
}
if(run.tf){
TF_model <- TF(train_data, train_label)
return(TF_model)
}
if(run.GBM){
GBM_model <- GBM(train_data, train_label)
return(GBM_model)
}
}
RF_model <- train(train_data, train_label, run.RF = T)
train_label <- ifelse((train_label == "dog"), 1, 0)
temp <- cbind(train_label, train_data)
View(temp)
gbm1<-gbm(train_label~train_data,
distribution = "bernoulli",
n.trees = 1000,
shrinkage = 0.005,
interaction.depth = 6,
n.minobsinnode = 10,
keep.data = TRUE,
verbose = TRUE,
train.fraction = 0.5,
bag.fraction = 0.5,
cv.folds=3
)
?gbm
View(train_data)
gbm1<-gbm(train_label~.,
data = train_data,
distribution = "bernoulli",
n.trees = 1000,
shrinkage = 0.005,
interaction.depth = 6,
n.minobsinnode = 10,
keep.data = TRUE,
verbose = TRUE,
train.fraction = 0.5,
bag.fraction = 0.5,
cv.folds=3
)
adaboost1<-gbm(train_label~.,
data = train_data,
distribution = "adaboost",
n.trees = 1000,
shrinkage = 0.005,
interaction.depth = 6,
n.minobsinnode = 10,
keep.data = TRUE,
verbose = TRUE,
train.fraction = 0.5,
bag.fraction = 0.5,
cv.folds=3
)
?xgboost
??xgboost
install.packages("xgboost")
if(!suppressWarnings(require('xgboost')))
{
install.packages('xgboost')
require('xgboost')
}
library(xgboost)
ã€‚
?xgboost
xgboost1<-xgboost(data=train_data,
label=train_label,
max.depth = 11,
eta = 0.5,
nround = 25,
objective = "binary:logistic")
xgboost1<-xgboost(data=data.matrix(train_data),
label=train_label,
max.depth = 11,
eta = 0.5,
nround = 25,
objective = "binary:logistic")
predict(xgboost1, test_data[,3:ncol(test_data)])
RF_model <- train(train_data, train_label, run.Ada = T)
train <- function(train_data, train_label, run.RF = F,run.TF = F,
run.Ada = F, run.GBM = F, run.XGB = F, export = T){
### Input:
###  -  processed features from images
###  -  labels
### Output: training model specification
### load libraries
library("gbm")
RF <- function(train_data, train_label){
require(randomForest, quietly = TRUE)
seed = 1
set.seed(seed)
rf_model <- tuneRF(train_data, train_label, ntreeTry = 500, doBest = TRUE)
if(export){
save(rf_model, file = "../output/rf_model.Rdata")
}
return(rf_model)
}
TF <- function(train_data){
save(tf_model, file = "../output/tf_model.Rdata")
return(TF_model)
}
Ada <- function(train_data, train_label){
if(!suppressWarnings(require('gbm')))
{
install.packages('gbm')
require('gbm')
}
library(gbm)
# adaboost1 denotes the adaboost model
adaboost1<-gbm(train_label~.,
data = train_data,
distribution = "adaboost",
n.trees = 1000,
shrinkage = 0.005,
interaction.depth = 6,
n.minobsinnode = 10,
keep.data = TRUE,
verbose = TRUE,
train.fraction = 0.5,
bag.fraction = 0.5,
cv.folds=3
)
# Using cross validation to find the best iteration number
best.iter2<-gbm.perf(adaboost1,method = "cv")
result <- list(model = adaboost1, params = best.iter2)
if(export){
save(result, file = "../output/ada_model.Rdata")
}
return(result)
}
Xgb <- function(train_data, train_label){
if(!suppressWarnings(require('xgboost')))
{
install.packages('xgboost')
require('xgboost')
}
library(xgboost)
# xgboost1 denotes the xgboost model
xgboost1<-xgboost(data=data.matrix(train_data),
label=train_label,
max.depth = 11,
eta = 0.5,
nround = 25,
objective = "binary:logistic")
result <- xgboost1
if(export){
save(result, file = "../output/xgb_model.Rdata")
}
return(result)
}
GBM <- function(train_data, train_label){
if(!suppressWarnings(require('gbm')))
{
install.packages('gbm')
require('gbm')
}
library(gbm)
gbm<-gbm(train_label~.,
data = train_data,
distribution = "bernoulli",
n.trees = 1000,
shrinkage = 0.005,
interaction.depth = 6,
n.minobsinnode = 10,
keep.data = TRUE,
verbose = TRUE,
train.fraction = 0.5,
bag.fraction = 0.5,
cv.folds=3
)
best.iter2<-gbm.perf(adaboost1,method = "cv")
result <- list(model = gbm, params = best.iter2)
if(export){
save(result, file = "../output/gbm_model.Rdata")
}
return(result)
}
### Train with selected model
if(run.RF){
RF_model <- RF(train_data, train_label)
return(RF_model)
}
if(run.tf){
TF_model <- TF(train_data, train_label)
return(TF_model)
}
if(run.Ada){
Ada_model <- Ada(train_data, train_label)
return(Ada_model)
}
if(run.GBM){
GBM_model <- GBM(train_data, train_label)
return(GBM_model)
}
if(run.XGB){
XGB_model <- Xgb(train_data, train_label)
return(XGB_model)
}
}
RF_model <- train(train_data, train_label, run.Ada = T)
train <- function(train_data, train_label, run.RF = F,run.tf = F,
run.Ada = F, run.GBM = F, run.XGB = F, export = T){
### Input:
###  -  processed features from images
###  -  labels
### Output: training model specification
### load libraries
library("gbm")
RF <- function(train_data, train_label){
require(randomForest, quietly = TRUE)
seed = 1
set.seed(seed)
rf_model <- tuneRF(train_data, train_label, ntreeTry = 500, doBest = TRUE)
if(export){
save(rf_model, file = "../output/rf_model.Rdata")
}
return(rf_model)
}
TF <- function(train_data){
save(tf_model, file = "../output/tf_model.Rdata")
return(TF_model)
}
Ada <- function(train_data, train_label){
if(!suppressWarnings(require('gbm')))
{
install.packages('gbm')
require('gbm')
}
library(gbm)
# adaboost1 denotes the adaboost model
adaboost1<-gbm(train_label~.,
data = train_data,
distribution = "adaboost",
n.trees = 1000,
shrinkage = 0.005,
interaction.depth = 6,
n.minobsinnode = 10,
keep.data = TRUE,
verbose = TRUE,
train.fraction = 0.5,
bag.fraction = 0.5,
cv.folds=3
)
# Using cross validation to find the best iteration number
best.iter2<-gbm.perf(adaboost1,method = "cv")
result <- list(model = adaboost1, params = best.iter2)
if(export){
save(result, file = "../output/ada_model.Rdata")
}
return(result)
}
Xgb <- function(train_data, train_label){
if(!suppressWarnings(require('xgboost')))
{
install.packages('xgboost')
require('xgboost')
}
library(xgboost)
# xgboost1 denotes the xgboost model
xgboost1<-xgboost(data=data.matrix(train_data),
label=train_label,
max.depth = 11,
eta = 0.5,
nround = 25,
objective = "binary:logistic")
result <- xgboost1
if(export){
save(result, file = "../output/xgb_model.Rdata")
}
return(result)
}
GBM <- function(train_data, train_label){
if(!suppressWarnings(require('gbm')))
{
install.packages('gbm')
require('gbm')
}
library(gbm)
gbm<-gbm(train_label~.,
data = train_data,
distribution = "bernoulli",
n.trees = 1000,
shrinkage = 0.005,
interaction.depth = 6,
n.minobsinnode = 10,
keep.data = TRUE,
verbose = TRUE,
train.fraction = 0.5,
bag.fraction = 0.5,
cv.folds=3
)
best.iter2<-gbm.perf(adaboost1,method = "cv")
result <- list(model = gbm, params = best.iter2)
if(export){
save(result, file = "../output/gbm_model.Rdata")
}
return(result)
}
### Train with selected model
if(run.RF){
RF_model <- RF(train_data, train_label)
return(RF_model)
}
if(run.tf){
TF_model <- TF(train_data, train_label)
return(TF_model)
}
if(run.Ada){
Ada_model <- Ada(train_data, train_label)
return(Ada_model)
}
if(run.GBM){
GBM_model <- GBM(train_data, train_label)
return(GBM_model)
}
if(run.XGB){
XGB_model <- Xgb(train_data, train_label)
return(XGB_model)
}
}
RF_model <- train(train_data, train_label, run.Ada = T)
load("../data/split_data/train/train_data.Rdata")
train_label <- train_data$label
train_label <- ifelse((train_label == "dog"), 1, 0)
train_data <- train_data[,3:ncol(train_data)]
save(train_label, file = "../data/split_data/train/train_label.Rdata")
save(train_label, file = "../data/split_data/train/train_data.Rdata")
save(train_data, file = "../data/split_data/train/train_data.Rdata")
save(train_label, file = "../data/split_data/train/train_label.Rdata")
load("../data/split_data/test/test_data.Rdata")
test_data <- test_data[,3:ncol(test_data)]
load("../data/split_data/test/test_data.Rdata")
test_label <- ifelse(test_data$label =="dog"),1,0)
test_label <- ifelse((test_data$label =="dog"),1,0)
test_data <- test_data[,3:ncol(test_data)]
save(test_data, file = "../data/split_data/test/test_data.Rdata")
save(test_label, file = "../data/split_data/test/test_label.Rdata")
